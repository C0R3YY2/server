
/* **** DO NOT EDIT - this file is generated by ARChitect2 ****
 *
 * Description: Header file declaring the compiler extensions for apex components
 */

#ifndef _apexextensions_H_
#define _apexextensions_H_

// User extension instruction - crc32
extern long crc32(long, long);
#pragma intrinsic(crc32, opcode => 0x07, sub_opcode => 0x00 )

// User extension instruction - crc32h
extern long crc32h(long, long);
#pragma intrinsic(crc32h, opcode => 0x07, sub_opcode => 0x01 )

// User extension instruction - jliarbs
extern long jliarbs(long, long);
#pragma intrinsic(jliarbs, opcode => 0x07, sub_opcode => 0x10 )

// User extension instruction - crc32b
extern long crc32b(long, long);
#pragma intrinsic(crc32b, opcode => 0x07, sub_opcode => 0x02 )

// User extension instruction - crc16
extern long crc16(long, long);
#pragma intrinsic(crc16, opcode => 0x07, sub_opcode => 0x04 )

// User extension instruction - crc16h
extern long crc16h(long, long);
#pragma intrinsic(crc16h, opcode => 0x07, sub_opcode => 0x05 )

// User extension instruction - crc16b
extern long crc16b(long, long);
#pragma intrinsic(crc16b, opcode => 0x07, sub_opcode => 0x06 )

// User extension instruction - crc24
extern long crc24(long, long);
#pragma intrinsic(crc24, opcode => 0x07, sub_opcode => 0x08 )

// User extension instruction - crc24h
extern long crc24h(long, long);
#pragma intrinsic(crc24h, opcode => 0x07, sub_opcode => 0x09 )

// User extension instruction - crc24b
extern long crc24b(long, long);
#pragma intrinsic(crc24b, opcode => 0x07, sub_opcode => 0x0a )

// User extension instruction - bswp32
extern long bswp32(long);
#pragma intrinsic(bswp32, opcode => 0x07, sub_opcode => 0x0c )

// User extension instruction - bswp16
extern long bswp16(long);
#pragma intrinsic(bswp16, opcode => 0x07, sub_opcode => 0x0d )

// User extension instruction - bswp8
extern long bswp8(long);
#pragma intrinsic(bswp8, opcode => 0x07, sub_opcode => 0x0e )

#define APEX_CRC_EXTENSION_PRESENT  1
#define APEX_JLI_REBASE_EXTENSION_PRESENT   1
#define APEX_LOG2_EXTENSION_PRESENT 1

// User extension instruction log2p1
extern int log2p1(int);
#pragma intrinsic(log2p1,opcode=>7,sub_opcode=>0)

// User extension instruction log2p0
extern int log2p0(int);
#pragma intrinsic(log2p0,opcode=>7,sub_opcode=>1)
#define APEX_COM_ARC_HARDWARE_FLOATING_POINT_UNIT_PRESENT   1

// User extension aux register fpu_build
#define AR_FPU_BUILD 0xc8
#pragma Aux_register(0xc8, name=>"fpu_build")

// User extension aux register fpu_ctrl
#define AR_FPU_CTRL 0x300
#pragma Aux_register(0x300, name=>"fpu_ctrl")

// User extension aux register fpu_status
#define AR_FPU_STATUS 0x301
#pragma Aux_register(0x301, name=>"fpu_status")

// User extension instruction fsmul
extern int fsmul(int,int);
#pragma intrinsic(fsmul,opcode=>6,sub_opcode=>0, effects=>"auxreg=0xc8:is_read:is_written; auxreg=0x300:is_read:is_written; auxreg=0x301:is_read:is_written")

// User extension instruction fsadd
extern int fsadd(int,int);
#pragma intrinsic(fsadd,opcode=>6,sub_opcode=>1, effects=>"auxreg=0xc8:is_read:is_written; auxreg=0x300:is_read:is_written; auxreg=0x301:is_read:is_written")

// User extension instruction fssub
extern int fssub(int,int);
#pragma intrinsic(fssub,opcode=>6,sub_opcode=>2, effects=>"auxreg=0xc8:is_read:is_written; auxreg=0x300:is_read:is_written; auxreg=0x301:is_read:is_written")

// User extension instruction fcvt32
extern int fcvt32(int,int);
#pragma intrinsic(fcvt32,opcode=>6,sub_opcode=>8, effects=>"auxreg=0xc8:is_read:is_written; auxreg=0x300:is_read:is_written; auxreg=0x301:is_read:is_written")

// User extension instruction fsdiv
extern int fsdiv(int,int);
#pragma intrinsic(fsdiv,opcode=>6,sub_opcode=>7, effects=>"auxreg=0xc8:is_read:is_written; auxreg=0x300:is_read:is_written; auxreg=0x301:is_read:is_written")

// User extension instruction fscmp
extern int fscmp(int,int);
#pragma intrinsic(fscmp,opcode=>6,sub_opcode=>3, effects=>"auxreg=0xc8:is_read:is_written; auxreg=0x300:is_read:is_written; auxreg=0x301:is_read:is_written")

// User extension instruction fscmp
extern int fscmp_f(int,int);
#pragma intrinsic(fscmp_f,opcode=>6,sub_opcode=>3, set_flags => 1, flags => "zncv", effects=>"auxreg=0xc8:is_read:is_written; auxreg=0x300:is_read:is_written; auxreg=0x301:is_read:is_written")

// User extension instruction fscmpf
extern int fscmpf(int,int);
#pragma intrinsic(fscmpf,opcode=>6,sub_opcode=>4, effects=>"auxreg=0xc8:is_read:is_written; auxreg=0x300:is_read:is_written; auxreg=0x301:is_read:is_written")

// User extension instruction fscmpf
extern int fscmpf_f(int,int);
#pragma intrinsic(fscmpf_f,opcode=>6,sub_opcode=>4, set_flags => 1, flags => "zncv", effects=>"auxreg=0xc8:is_read:is_written; auxreg=0x300:is_read:is_written; auxreg=0x301:is_read:is_written")

// User extension instruction fssqrt
extern int fssqrt(int);
#pragma intrinsic(fssqrt,opcode=>6,sub_opcode=>0, effects=>"auxreg=0xc8:is_read:is_written; auxreg=0x300:is_read:is_written; auxreg=0x301:is_read:is_written")


#endif
