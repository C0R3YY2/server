////////////////////////////////////////////////////////////////////////////////
///
/// @file       ECCSchnoor.h
///
/// @project    T9305
///
/// @author     SAS
///
/// @brief     ECC Schnoor authentication protocol
///
/// @classification  Confidential
///
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
///
////////////////////////////////////////////////////////////////////////////////
///
/// @copyright Copyright (C) 2020 EM Microelectronic
/// @cond
///
/// All rights reserved.
///
/// Redistribution and use in source and binary forms, with or without
/// modification, are permitted provided that the following conditions are met:
/// 1. Redistributions of source code must retain the above copyright notice,
/// this list of conditions and the following disclaimer.
/// 2. Redistributions in binary form must reproduce the above copyright notice,
/// this list of conditions and the following disclaimer in the documentation
/// and/or other materials provided with the distribution.
///
////////////////////////////////////////////////////////////////////////////////
///
/// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
/// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
/// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
/// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
/// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
/// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
/// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
/// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
/// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
/// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
/// POSSIBILITY OF SUCH DAMAGE.
/// @endcond
////////////////////////////////////////////////////////////////////////////////

#ifndef ECC_SCHNOOR_H
#define ECC_SCHNOOR_H


/**
* @defgroup ECCSChnoor ECC Schnoor
* @ingroup ECC
* @brief ECC Schnoor external authentication protocol based on P-256
*
*/
//--------------------------------------------------------------------------------------------
//Exported functions
//--------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------
// ECC Schnoor Protocol API
//--------------------------------------------------------------------------------------------
/**
 * \fn ECC_Error_t ECCSchnoor_GenerateVerifierChallenge (uint32_t * VerifierChallenge);
 * \brief Generate a random challenge
 * \param[out] VerifierChallenge a random challenge of the size of the curve (32 bytes)
 * \return Error status
 * \retval #SW_ECC_OK Successful private key generation
 * \retval #SW_ECC_RANDOM_ERROR Error in random generation
 * \ingroup ECCSChnoor
 */
extern ECC_Error_t ECCSchnoor_GenerateVerifierChallenge (uint32_t * VerifierChallenge);

/**
 * \fn ECC_Error_t ECCSchnoor_Verify(POINT *PublicKey,POINT * Commitment, uint32_t *VerifierChallenge, uint32_t * Signature);
 * \brief  Verify the external signature
 * \param[in] PublicKey  The public key of the device. A point on P-256
 * \param[in] Commitment The commitment sent by the external entity. A point on p-256
 * \param[in] VerifierChallenge The 32-byte challenge generated by the device
 * \param[in] Signature The 32-byte signature sent by the external entity
 * \return Error status- Validiy of the signature
 *
 * \retval #SW_SCHNOOR_SIGNATURE_VALID Signature is valid
 * \retval #SW_SCHNOOR_SIGNATURE_INVALID Signature is not valid
 * \retval #SW_ECC_INVALID_COMMITMENT Invalid commitment
 * \retval #SW_ECC_INVALID_PUBLIC_POINT Invalid public key

 *
 * \ingroup ECCSChnoor
 */
extern ECC_Error_t ECCSchnoor_Verify(POINT *PublicKey,POINT * Commitment, uint32_t *VerifierChallenge, uint32_t * Signature);
#endif
